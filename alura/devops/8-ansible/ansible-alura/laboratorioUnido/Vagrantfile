# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/focal64"

  config.vm.define "controlMachine" do |controlMachine|

    controlMachine.vm.hostname = "controlMachine"
    
    controlMachine.vm.provider "virtualbox" do |vb|
      vb.name = "controlMachine"
      vb.memory = 1024
    end

    controlMachine.vm.network "private_network", ip: "192.168.0.1"

    #Instala o Ansible e suas dependências
    controlMachine.vm.provision "shell",
        inline: "apt-get update && \
                apt-get install -y software-properties-common && \
                apt-get install -y ansible"


    #Substitui o arquivo sshd_config na máquina virtual para que permita conexões ssh das outras máquinas
    controlMachine.vm.provision "shell", inline: "cp /vagrant/wordpress_com_ansible/files/sshd_config /etc/ssh"

    #Copia o diretório que está na pasta laboratorioUnico no Windows para a máquina virtual em /home/vagrant/
    controlMachine.vm.provision "shell", inline: "cp -r /vagrant/wordpress_com_ansible /home/vagrant"
    controlMachine.vm.provision "shell", inline: "chmod 777 /home/vagrant/wordpress_com_ansible"

    #Cria o diretório ssh-keys dentro do diretório wordpress_com_ansible na máquina virtual de controle
    controlMachine.vm.provision "shell", inline: "mkdir /home/vagrant/wordpress_com_ansible/ssh-keys"

  end  
  
  config.vm.define "wordpress" do |wordpress|

    wordpress.vm.hostname = "wordpress"

    wordpress.vm.provider "virtualbox" do |vb|
      vb.name = "wordpress"
      vb.memory = 1024
    end

    wordpress.vm.network "private_network", ip: "192.168.0.2"

    #Copia o arquivo com as configurações do arquivo sshd_config já definidas para permitir a instalação de chave ssh e login via linha de comando
    # da controlMachine para a wordpress e também restarta o serviço sshd para que as configurações do novo arquivo passem a ser válidas   
    wordpress.vm.provision "shell", inline: "cp /vagrant/wordpress_com_ansible/files/sshd_config /etc/ssh"
    wordpress.vm.provision "shell", inline: "sudo service sshd restart"

  end

  config.vm.define "database" do |database|

    database.vm.hostname = "database"
    
    database.vm.provider "virtualbox" do |vb|
      vb.name = "database"
      vb.memory = 1024
    end

    database.vm.network "private_network", ip: "192.168.0.3"

    #Copia o arquivo com as configurações do arquivo sshd_config já definidas para permitir a instalação de chave ssh e login via linha de comando
    # da controlMachine para a database e também restarta o serviço sshd para que as configurações do novo arquivo passem a ser válidas
    database.vm.provision "shell", inline: "cp /vagrant/wordpress_com_ansible/files/sshd_config /etc/ssh"
    database.vm.provision "shell", inline: "sudo service sshd restart"

  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
