# -*- mode: ruby -*-
# vi: set ft=ruby :

$script_mysql = <<-SCRIPT
    apt-get update && \
    apt-get install -y mysql-server-5.7 && \
    mysql -e "create user 'phpuser'@'%' identified by 'pass';"
SCRIPT


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "hashicorp/bionic64"

  # Abaixo configurações de memória e cpu para nossas máquinas virtuais. Se quisermos que estas configurações sejam individuais devemos coloca-las dentro do bloco onde está sendo criada a máquina virtual
  #config.vm.provider "virtualbox" do |v|
  #  v.memory = 1024
  #  v.cpus = 2
  #end

  #config.vm.define "mysqldb" do |mysql|
  # mysql.vm.network "public_network", ip: "192.168.1.14"

  # mysql.vm.synced_folder "./configs", "/configs"
  # mysql.vm.synced_folder ".", "/vagrant", disabled: true

  # mysql.vm.provision "shell", inline: "cat /configs/id_bionic64.pub >> .ssh/authorized_keys"
  # mysql.vm.provision "shell", inline: $script_mysql
  # mysql.vm.provision "shell", inline: "cat /configs/mysqld.cnf > /etc/mysql/mysql.conf.d/mysqld.cnf"
  # mysql.vm.provision "shell", inline: "service mysql restart"
  #end


  # Configuração abaixo é para caso queiramos executar um playbook.yml da mesma máquina onde estiver instalado o Vagrant e o Ansible
  #config.vm.provision "ansible" do |ansible|
  #    ansible.playbook = "playbook.yml"
  #  end

  config.vm.define "phpweb" do |phpweb|
    phpweb.vm.network "forwarded_port", guest: 8888, host: 8888
    phpweb.vm.network "public_network", ip: "192.168.1.15"

    phpweb.vm.provider "virtualbox" do |vb|
        vb.name = "ubuntu_bionic64_phpweb"
        vb.memory = 1024
        vb.cpus = 2
        #vb.gui = true
    end

    phpweb.vm.provision "shell", inline: "sudo apt-get update && sudo apt-get install -y puppet"

    phpweb.vm.provision "puppet" do |puppet|
        puppet.manifests_path = "./configs/manifests"
        puppet.manifest_file = "phpweb.pp"
    end
  end

  config.vm.define "mysqlserver" do |mysqlserver|
    mysqlserver.vm.network "public_network", ip: "192.168.1.16"

    mysqlserver.vm.provision "shell", inline: "cat /vagrant/configs/id_bionic64.pub >> .ssh/authorized_keys"
  end

    # A configuração abaixo é para o caso de querermos criar uma máquina virtual através do Vagrant para utilizar o Ansible, pois já sabemos que o Ansible não roda no Windows
    #
  config.vm.define "ansible" do |ansible|
    ansible.vm.network "public_network", ip: "192.168.1.17"

    ansible.vm.provision "shell",
        inline: "apt-get update && \
                apt-get install -y software-properties-common && \
                apt-add-repository --yes --update ppa:ansible/ansible && \
                apt-get install -y ansible"

    ansible.vm.provision "shell", inline: "cp /vagrant/id_bionic64 >> /home/vagrant && \
                                       chmod 600 /home/vagrant/id_bionic64 && \
                                       chown vagrant:vagrant /home/vagrant/id_bionic64"

    ansible.vm.provision "shell",
        inline: "ansible-playbook -i /vagrant/configs/ansible/hosts \
                /vagrant/configs/ansible/playbook.yml"
  end

  config.vm.define "memcached" do |memcached|
    memcached.vm.box = "centos/7"
    memcached.vm.provider "virtualbox" do |vb|
        vb.name = "centos7_memcached"
        vb.memory = 512
        vb.cpus = 1
    end
  end

  # Abaixo a criação de um host para utilizarmos o Docker já que a maioria das versões do Windows não rodam o Docker
  config.vm.define "dockerhost" do |dockerhost|
      dockerhost.vm.provider "virtualbox" do |vb|
          vb.name = "ubuntu_dockerhost"
          vb.memory = 512
          vb.cpus = 1
      end

      dockerhost.vm.provision "shell",
            inline: "apt-get update && apt-get install -y docker.io"
    end


  # Os comandos acima do shell provisioner para utilizar uma máquina virtual com ansible foram encontrados em sua documentação (Ansible)
  # Porém, no momento estou tentando utilizar o Ansible na própria máquina do Kali (localhost:3390 || 127.0.0.1:3390)
  # Caminhos absolutos (/) se referem a locais dentro da máquina virtual, caminhos abreviados (./) se referem a máquina local.
  # A pasta vagrant sempre será uma pasta padrão em todas as máquinas virtuais criadas, pode ser omitida como vimos em exemplos acima


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  #config.vm.network "forwarded_port", guest: 80, host: 8089

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"


  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  #config.vm.network "private_network", ip: "192.168.50.4"
  #config.vm.network "private_network", type: "dhcp"


  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  #config.vm.network "public_network"
  #config.vm.network "public_network", ip: "192.168.1.14"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  #config.vm.synced_folder "./configs", "/configs"
  #config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  # config.vm.provision "shell", inline: "echo Hello, World >> hello.txt"
  #config.vm.provision "shell", inline: "cat /configs/id_bionic64.pub >> .ssh/authorized_keys"
  #config.vm.provision "shell", inline: $script_mysql
  #config.vm.provision "shell", inline: "cat /configs/mysqld.cnf > /etc/mysql/mysql.conf.d/mysqld.cnf"
  #config.vm.provision "shell", inline: "service mysql restart"

end
