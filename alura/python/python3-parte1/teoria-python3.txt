Para baixar o Python - python.org
Para utilizá-lo no navegador - repl.it


Aula 01: Função print e variáveis -------

Usamos a função print...

>>> print("Ola Mundo")
Ola Mundo


Podemos analisar mais esta função com...

>>> help()

Então que o console mudou...

help>

Agora podemos pesquisar o módulo que estavamos utilizando...

help> print

Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)

    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.

>>>

Poderíamos ter feito o caminho direto...

>>> help(print)

O que nos importa ~sao os três primeiros valores que a função print pode receber:

- value = Valor que queremos imprimir...As reticencias indicam que a função pode receber mais de um valor, basta separá-los
    por vírgula.

- sep = Separador entre os valores, por padrão o separador é um espaço em branco.

- end = O que acontecerá ao final da função, podemos por padrão colocar uma quebra de linha (\n)


A tecla 'Q' serve para sairmos da documentação...

CTRL + C ou CTRL + D para sair do console de ajuda do Python.

TESTANDO A FUNÇÃO PRINT...

>>> print("Brasil", "ganhou", 5, "titulos mundiais", sep="-")

Brasil-ganhou-5-titulos mundiais

Como vimos antes, sep no final separa os valores com o caracter que informamos...



VARIÁVEIS -------

Vamos definir valores fora da função print()....

>>> pais = "Italia"

Definimos a variável 'pais' com o valor "Italia", vamos fazer isso com a quantidade também....

>>> quantidade = 4


Agora vamos refazer a função print() porém com as variáveis que acabamos de criar ao invés do valor...

>>> print(pais, "ganhou", quantidade, "titulos mundiais")

A saída que teremos será:

Italia ganhou 4 titulos mundiais

Podemos perceber que a variável é criada assim que atribuimos um valor a ela não importando seu nome....Mas e o tipo? O
tipo é definido baseado no valor...

Se executarmos...

>>> type(pais) // Teremos a seguinte saida
<class 'str'> //  O que significa que a variável é do tipo String

>>> type(quantidade)
<class 'int'> // O que significa que a variável é do tipo int


IMPRIMINDO DATAS -------

Neste tópico a questão era...Sem passar variável nova e nem string adicional

Como teriamos a data em que:

>>> dia = 15
>>> mes = 10
>>> ano = 2015

Ficassem formatados desta forma: 15/10/2015

Minha resposta: print(dia, mes, ano, sep="/")
Estava correta!


TIPAGEM DO PYTHON -------

Vimos nos tópicos anteriores que Python sempre tem um tipo associado a sua variável.
Porém em nenhum momento definimos qual seria o tipo da variável, isto porque Python trabalha com tipagem dinâmica

Algo como:

>>> str pais = "Brasil"

Ocasionaria um erro...

Seguindo o fluxo de execução, se fizessemos...

>>> pais = "Brasil"
>>> type(pais)
<class 'str'>
>>> pais = 644
>>> type(pais)
<class 'int'>

Ou seja, o tipo da variável foi alterando de acordo com o valor que fomos mudando...


SNAKE_CASE -------

O Python utiliza por convenção o padrão Snake_Case para nomes de variáveis (Ou identificadores)...

Exemplos de variáveis Snake_Case:

idade_esposa = 20
perfil_vip = 'Flávio Almeida'
recibos_em_atraso = 30

Em outras linguagens, como Java, utilizamos o padrão CamelCase:

idadeEsposa = 20;
perfilVip = 'Flávio Almeida';
recibosEmAtraso = 30


Questões aula 01:

1 - Qual é a função utilizada para imprimir algo na tela?

Selecione uma alternativa

R: print()

Correto!

A função é a print(). Basta passar a mensagem como parâmetro para a função, que a mensagem será impressa. Ela inclusive
apareceu várias vezes no vídeo!


2 - Veja o código a seguir:

>>> subst = "Python"
>>> verbo = "é"
>>> adjetivo = "fantástico"
>>> print(subst, verbo, adjetivo, sep="_", end="!\n")COPIAR CÓDIGO
Qual será a saída do comando print?

Selecione uma alternativa

R: Python_é_fantástico!

Correto!


3 - Temos a seguinte variável, que representa o preço de um produto:

preco = 49.99

Qual será o tipo da variável preco? Faça o teste!

Selecione uma alternativa

R: float

Correto!

O valor 49.99, é um número decimal, ou seja, com um ponto flutuante, por isso em Python o seu tipo será o float.


4 - Sabendo que o Python usa uma tipagem dinâmica, qual alternativa abaixo é correta?

Selecione uma alternativa

R: Uma variável só passa a existir quando atribuímos um valor.

Correto! É preciso atribuir um valor para inicializar uma variável, definindo assim o seu tipo.

Não há declaração de variáveis estáticas em Python, como em linguagens como C, Java ou C#. Nessas linguagens, indicamos
o tipo e o nome das variáveis e ela já passa a existir.

Exemplo:

int idade;

Em Python precisamos atribuir um valor na criação da variável sem expecificar seu tipo...

idade = 17


Aula 02: Lidando com a entrada do usuário -------

Comparando variáveis:

A ideia do jogo é acertar um número secreto...

A lógica do jogo está no arquivo 'divination.py'

Além das lições tratadas em aula foi dada enfase a questão de que uma String não pode ser comparada com um Int
Num primeiro momento fizemos este teste e deu erro, a saída sempre era 'false', então fomos pro console do Python para
verificar de forma transparente o que estava acontecendo

Python 3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)] on win32

#Definindo o numero secreto
numero_secreto = 7

#Verificando o tipo da variavel do numero secreto
type(numero_secreto)
<class 'int'>

#Solicitando o chute
chute = input("digite")
digite>? 7

#Verificando o tipo da variavel
type (chute)
<class 'str'>

#Convertendo String em Int
numero = int(chute)

#Comparando agora as duas variáveis do mesmo tipo
numero_secreto == numero
True


Diferenças entre o Python 2 e o Python 3:

A função print:

A primeira diferença que podemos ver é que no Python 2, não precisamos colocar os parênteses na função print, eles
são opicionais:

>>> print "python2"
python2
>>> print("python2")
python2

Já no Python 3, os parênteses são obrigatórios. Ainda na função print, no Python 2 não há parâmetros 'sep' e 'end',
ao contrário do Python 3, e quando a função recebe mais de um valor, sua saída é diferente:

>>> print("python", "2")
('python', '2')

A função input:

Outra diferença que podemos ver é a função input. Sabemos que no Python 3, essa função sempre retornará uma string.
Já no Python 2, ela automaticamente converte o tipo da variável. Por exemplo:

>>> chute = input("Digite o seu número: ")
Digite o seu número: 42
>>> type(chute)
<type 'int'>

Isso foi considerado má prática, porque pode ou não ser a intenção do desenvolvedor converter o tipo da variável.
Por isso é bem comum encontrar a função 'raw_input' sendo utilizada no Python 2:

>>> chute = raw_input("Digite o seu número: ")
Digite o seu número: 42
>>> type(chute)
<type 'str'>

O retorno dessa função será sempre uma string, equivalente à função input do Python 3, mas ela não existe nessa versão.


Questões aula 02:

1 - Romário, seguindo o que foi aprendido neste curso, resolveu testar o código que compara o chute digitado pelo
usuário com um número secreto definido no programa.

numero_secreto = 42

chute = input("Digite seu número")
print("Você digitou ", chute)
if(numero_secreto == chute):
    print("Você acertou")
else:
    print("Você errou")

Com base no código de Romário, temos as seguintes afirmações:

a) Sempre exibirá a mensagem Você errou, independentemente se o chute for igual ao número secreto

b) Todo valor retornado pela função input é um número.

c) É necessário converter o retorno de input para um número, no caso, um inteiro.

Sobre as afirmações anteriores, podemos dizer que:

Selecione uma alternativa

R: Apenas B é falsa.

Não importa o número digitado, a comparação com == envolvendo tipos diferentes resultará em falso. Isso porque a função
input sempre retorna um texto (string). Sendo assim, é necessário converter o valor retornado em inteiro, para que a
comparação com outro inteiro, no caso o numero_secreto, seja possível. Realizamos essa conversão através da função int.

Corrigindo o código:

numero_secreto = 42
chute_str = input("Digite seu número")
chute = int(chute_str)
print("Você digitou ", chute)
if(numero_secreto == chute):
    print("Você acertou")
else:
    print("Você errou")

No lugar de criarmos outra variável, usamos a mesma para receber o valor da sua conversão.


2 - Fernanda, colocando em prática o que aprendeu neste capítulo, escreveu o seguinte código para testar se realmente
aprendeu a criar uma condição if em seu código:

minha_idade = 26
idade_namorado = 25
if(minha_idade == idade_namorado)
    print('temos idades iguais')
else:
    print('temos idades diferentes')

O problema é que o código dela não funciona. Consegue enxergar onde está o problema? Para quem está começando com Python,
pode ser bem sutil. Descobriu? Clique em Ver Opinião do Instrutor, que você verá a resposta do instrutor.

R: Faltam os dois pontos (:) depois do if


3 - Romeu fez uma simples comparação entre números, mas que não funciona. Segue o código:

numero1 = 10
numero2 = 10

if(numero1 = numero2):
    print("São números iguais")

Consegue descobrir onde Romeu errou? Pense bem para em seguida clicar em Ver Opinião do Instrutor e ver a resposta do
instrutor.

R: São na verdade dois '=', ficando '==', para que possamos comparar.


4 - Temos o seguinte código:

idade1 = 10
idade2 = "20"
print(idade1 + idade2)

Qual das opções abaixo possui o resultado do código? Fique à vontade de testar esse código no console do Python.

Selecione uma alternativa

R: O código não funciona!

O código na verdade não funciona, e exibe a seguinte mensagem de erro no console:

unsupported operand type(s) for +: 'int' and 'str'
Isso acontece porque não podemos realizar uma operação de soma envolvendo uma string. Para resolvermos o problema,
podemos apelar para a função int(), que converte uma string que contém um número, em um número inteiro:

idade1 = 10
idade2 = int("20")
print(idade1 + idade2)


5 - Temos o seguinte trecho de código:

nome = "Nico"
sobrenome = "Steppat"

print(nome + sobrenome)

O resultado da operação é:

Selecione uma alternativa

R: NicoSteppat

A resposta correta é NicoSteppat.

O caractere + aqui não tem o significado de somar e sim de concatenar. Estamos concatenando (juntando) duas strings!

Repare também que não há espaço entre as palavras. Para que haja, basta fazer assim:

nome = "Nico"
sobrenome = "Steppat"
print(nome, sobrenome)

Lembrando que a função print automaticamente aplica um separador entre os valores. O separador é um espaço por padrão,
mas pode ser reconfigurado pelo parâmetro sep:

nome = "Nico"
sobrenome = "Steppat"
print(nome, sobrenome, sep="_")


6 - Quais funções existem no Python 3?

Selecione 3 alternativas

R:
input(...)
print(...)
int(...)

As funções input(...), print(...) e int(...) existem no Python 3.

A função raw_input(..) existe apenas no Python 2.


7 - Marque todas as alternativas verdadeiras:

Selecione 4 alternativas

R1:
R1: No Python 3, a instrução print("ola", "mundo") imprime como saída ola mundo, diferente do Python 2, que possui como
saída ('ola', 'mundo').

R2: No Python 2, quando digitamos um valor numérico através de input, ele automaticamente converte de str para int. Já o
Python 3 não assume essa conversão automática, sendo o desenvolvedor responsável por fazê-la.

R3: A função raw_input só existe em Python 2 e quando usada, lê a entrada como str, sem realizar conversões de tipos,
como na função input.

R4: Uma função em Python 3 sempre deve possuir parênteses.


Para saber mais: Javascript vs Python

Vimos que o Python apenas soma valores de tipos numéricos, ou seja, o exemplo a seguir não funciona por causa do tipo
string:

numero1 = 10
numero2 = "20"
soma = numero1 + numero2
TypeError: unsupported operand type(s) for +: 'int' and 'str'

Agora, o que acontece com o mesmo código no mundo JavaScript? Você pode testar isso facilmente dentro do seu navegador,
apertando F12 para abrir o seu console. Nele, digite o código:

numero1
10
numero2
"20"
soma = numero1 + numero2
"1020"

Repare que o JavaScript concatena os valores, criando a string: "1020"

Você pode pensar que isso faz sentido, já que a variável 'numero2' é do tipo string, no entanto o que o JavaScript faz é
uma conversão implícita. O JavaScript converte a variável 'numero1' automaticamente para string, e isso pode ser
perigoso.

Vou tentar dar mais um exemplo com JavaScript. Agora vamos multiplicar 'numero1' e 'numero2':

produto = numero1 * numero2
200

Repare que o JavaScript multiplicou e imprimiu 200! Agora também aconteceu uma conversão automática, mas dessa vez a
variável 'numero2' foi convertida para 'int'. Novamente, o JavaScript é tolerante nessse aspecto e converte quando julga
necessário. O Python é mais rígido nesse sentido e não faz essas conversões implícitas.

Ótimo, então vamos testar a multiplicação com Python:

numero1 = 10
numero2 = "20"
produto = numero1 * numero2
print(produto)

O resultado surpreende:

20202020202020202020

Não deu erro e sim imprimiu 10 vezes 20! Mas Python não é rígido e não converte automaticamente?

Na verdade não aconteceu uma conversão automática/implícita. Trata-se apenas de um syntax sugar do mundo Python. Um
syntax sugar, açúcar sintático da linguagem, apenas simplifica algo que seria trabalhoso, mas não muda a característica
da linguagem. Então, ao invés de escrever dez vezes o número 20, podemos simplificar e escrever 10 * "20".
