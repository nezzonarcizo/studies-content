Function Modifiers
A function modifier looks just like a function, but uses the keyword modifier instead of the keyword function. 
And it can't be called directly like a function can — instead we can attach the modifier's name at the end of a 
function definition to change that function's behavior.

Let's take a closer look by examining onlyOwner:

/**
 * @dev Throws if called by any account other than the owner.
 */
modifier onlyOwner() {
  require(msg.sender == owner);
  _;
}
We would use this modifier as follows:

contract MyContract is Ownable {
  event LaughManiacally(string laughter);

  // Note the usage of `onlyOwner` below:
  function likeABoss() external onlyOwner {
    LaughManiacally("Muahahahaha");
  }
}

Notice the onlyOwner modifier on the likeABoss function. When you call likeABoss, the code inside onlyOwner executes first. 
Then when it hits the _; statement in onlyOwner, it goes back and executes the code inside likeABoss.
So while there are other ways you can use modifiers, one of the most common use-cases is to add quick require check before a 
function executes.
In the case of onlyOwner, adding this modifier to a function makes it so only the owner of the contract (you, if you deployed it)
can call that function.
Note: Giving the owner special powers over the contract like this is often necessary, but it could also be used maliciously.
 For example, the owner could add a backdoor function that would allow him to transfer anyone's zombies to himself!
So it's important to remember that just because a DApp is on Ethereum does not automatically mean it's decentralized — you have 
to actually read the full source code to make sure it's free of special controls by the owner that you need to potentially worry
about. There's a careful balance as a developer between maintaining control over a DApp such that you can fix potential bugs, 
and building an owner-less platform that your users can trust to secure their data.