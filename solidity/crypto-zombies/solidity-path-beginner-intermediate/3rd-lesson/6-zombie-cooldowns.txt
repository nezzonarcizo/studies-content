Now that we have a readyTime property on our Zombie struct, let's jump to zombiefeeding.sol and implement a cooldown timer.

We're going to modify our feedAndMultiply such that:

Feeding triggers a zombie's cooldown, and

Zombies can't feed on kitties until their cooldown period has passed

This will make it so zombies can't just feed on unlimited kitties and multiply all day. In the future when we add battle functionality, we'll make it so attacking 
other zombies also relies on the cooldown.

First, we're going to define some helper functions that let us set and check a zombie's readyTime.

Passing structs as arguments
You can pass a storage pointer to a struct as an argument to a private or internal function. This is useful, for example, for passing around our Zombie structs 
between functions.

The syntax looks like this:

function _doStuff(Zombie storage _zombie) internal {
  // do stuff with _zombie
}
This way we can pass a reference to our zombie into a function instead of passing in a zombie ID and looking it up.